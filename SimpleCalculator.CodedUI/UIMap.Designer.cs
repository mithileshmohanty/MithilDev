// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SimpleCalculator.CodedUI
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// TestCalculator - Use 'TestCalculatorParams' to pass parameters into this method.
        /// </summary>
        public void TestCalculator()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UISampleCalculatorexeListItem.UINameEdit;
            WpfEdit uITextBoxEdit = this.UIMainWindowWindow.UITextBoxEdit;
            WpfEdit uITextBox_CopyEdit = this.UIMainWindowWindow.UITextBox_CopyEdit;
            WpfComboBox uIComboBoxComboBox = this.UIMainWindowWindow.UIComboBoxComboBox;
            WpfButton uICalculateButton = this.UIMainWindowWindow.UICalculateButton;
            WinButton uICloseButton = this.UIMainWindowWindow1.UICloseButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(63, 19));

            // Type '1' in 'textBox' text box
            uITextBoxEdit.Text = this.TestCalculatorParams.UITextBoxEditText;

            // Type '2' in 'textBox_Copy' text box
            uITextBox_CopyEdit.Text = this.TestCalculatorParams.UITextBox_CopyEditText;

            // Select 'Add' in 'comboBox' combo box
            uIComboBoxComboBox.SelectedItem = this.TestCalculatorParams.UIComboBoxComboBoxSelectedItem;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(65, 7));

            // Select 'Multiply' in 'comboBox' combo box
            uIComboBoxComboBox.SelectedItem = this.TestCalculatorParams.UIComboBoxComboBoxSelectedItem1;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(59, 15));

            // Select 'Divide' in 'comboBox' combo box
            uIComboBoxComboBox.SelectedItem = this.TestCalculatorParams.UIComboBoxComboBoxSelectedItem2;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(64, 19));

            // Select 'Substract' in 'comboBox' combo box
            uIComboBoxComboBox.SelectedItem = this.TestCalculatorParams.UIComboBoxComboBoxSelectedItem3;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(63, 15));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(15, 18));
        }
        
        /// <summary>
        /// CheckAddition - Use 'CheckAdditionParams' to pass parameters into this method.
        /// </summary>
        public void CheckAddition()
        {
            #region Variable Declarations
            WpfEdit uITextBoxEdit = this.UIMainWindowWindow.UITextBoxEdit;
            WpfEdit uITextBox_CopyEdit = this.UIMainWindowWindow.UITextBox_CopyEdit;
            WpfComboBox uIComboBoxComboBox = this.UIMainWindowWindow.UIComboBoxComboBox;
            WpfEdit uITextBox_Copy1Edit = this.UIMainWindowWindow.UITextBox_Copy1Edit;
            WpfButton uICalculateButton = this.UIMainWindowWindow.UICalculateButton;
            #endregion

            // Type '2' in 'textBox' text box
            uITextBoxEdit.Text = this.CheckAdditionParams.UITextBoxEditText;

            // Type '{Tab}' in 'textBox' text box
            Keyboard.SendKeys(uITextBoxEdit, this.CheckAdditionParams.UITextBoxEditSendKeys, ModifierKeys.None);

            // Type '1' in 'textBox_Copy' text box
            uITextBox_CopyEdit.Text = this.CheckAdditionParams.UITextBox_CopyEditText;

            // Type '{Tab}' in 'textBox_Copy' text box
            Keyboard.SendKeys(uITextBox_CopyEdit, this.CheckAdditionParams.UITextBox_CopyEditSendKeys, ModifierKeys.None);

            // Select 'Add' in 'comboBox' combo box
            uIComboBoxComboBox.SelectedItem = this.CheckAdditionParams.UIComboBoxComboBoxSelectedItem;

            // Click 'textBox_Copy1' text box
            Mouse.Click(uITextBox_Copy1Edit, new Point(101, 17));

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(72, 17));
        }
        
        /// <summary>
        /// CheckValue - Use 'CheckValueExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckValue()
        {
            #region Variable Declarations
            WpfEdit uITextBox_Copy1Edit = this.UIMainWindowWindow.UITextBox_Copy1Edit;
            #endregion

            // Verify that the 'ControlType' property of 'textBox_Copy1' text box equals '3'
            Assert.AreEqual(this.CheckValueExpectedValues.UITextBox_Copy1EditControlType, uITextBox_Copy1Edit.ControlType.ToString(), "Error in addition");
        }
        
        #region Properties
        public virtual TestCalculatorParams TestCalculatorParams
        {
            get
            {
                if ((this.mTestCalculatorParams == null))
                {
                    this.mTestCalculatorParams = new TestCalculatorParams();
                }
                return this.mTestCalculatorParams;
            }
        }
        
        public virtual CheckAdditionParams CheckAdditionParams
        {
            get
            {
                if ((this.mCheckAdditionParams == null))
                {
                    this.mCheckAdditionParams = new CheckAdditionParams();
                }
                return this.mCheckAdditionParams;
            }
        }
        
        public virtual CheckValueExpectedValues CheckValueExpectedValues
        {
            get
            {
                if ((this.mCheckValueExpectedValues == null))
                {
                    this.mCheckValueExpectedValues = new CheckValueExpectedValues();
                }
                return this.mCheckValueExpectedValues;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIMainWindowWindow1 UIMainWindowWindow1
        {
            get
            {
                if ((this.mUIMainWindowWindow1 == null))
                {
                    this.mUIMainWindowWindow1 = new UIMainWindowWindow1();
                }
                return this.mUIMainWindowWindow1;
            }
        }
        #endregion
        
        #region Fields
        private TestCalculatorParams mTestCalculatorParams;
        
        private CheckAdditionParams mCheckAdditionParams;
        
        private CheckValueExpectedValues mCheckValueExpectedValues;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIMainWindowWindow1 mUIMainWindowWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestCalculator'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class TestCalculatorParams
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'textBox' text box
        /// </summary>
        public string UITextBoxEditText = "1";
        
        /// <summary>
        /// Type '2' in 'textBox_Copy' text box
        /// </summary>
        public string UITextBox_CopyEditText = "2";
        
        /// <summary>
        /// Select 'Add' in 'comboBox' combo box
        /// </summary>
        public string UIComboBoxComboBoxSelectedItem = "Add";
        
        /// <summary>
        /// Select 'Multiply' in 'comboBox' combo box
        /// </summary>
        public string UIComboBoxComboBoxSelectedItem1 = "Multiply";
        
        /// <summary>
        /// Select 'Divide' in 'comboBox' combo box
        /// </summary>
        public string UIComboBoxComboBoxSelectedItem2 = "Divide";
        
        /// <summary>
        /// Select 'Substract' in 'comboBox' combo box
        /// </summary>
        public string UIComboBoxComboBoxSelectedItem3 = "Substract";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckAddition'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckAdditionParams
    {
        
        #region Fields
        /// <summary>
        /// Type '2' in 'textBox' text box
        /// </summary>
        public string UITextBoxEditText = "2";
        
        /// <summary>
        /// Type '{Tab}' in 'textBox' text box
        /// </summary>
        public string UITextBoxEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '1' in 'textBox_Copy' text box
        /// </summary>
        public string UITextBox_CopyEditText = "1";
        
        /// <summary>
        /// Type '{Tab}' in 'textBox_Copy' text box
        /// </summary>
        public string UITextBox_CopyEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Select 'Add' in 'comboBox' combo box
        /// </summary>
        public string UIComboBoxComboBoxSelectedItem = "Add";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CheckValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class CheckValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'textBox_Copy1' text box equals '3'
        /// </summary>
        public string UITextBox_Copy1EditControlType = "3";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UISampleCalculatorexeListItem UISampleCalculatorexeListItem
        {
            get
            {
                if ((this.mUISampleCalculatorexeListItem == null))
                {
                    this.mUISampleCalculatorexeListItem = new UISampleCalculatorexeListItem(this);
                }
                return this.mUISampleCalculatorexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISampleCalculatorexeListItem mUISampleCalculatorexeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISampleCalculatorexeListItem : WinListItem
    {
        
        public UISampleCalculatorexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SampleCalculator.exe";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITextBoxEdit
        {
            get
            {
                if ((this.mUITextBoxEdit == null))
                {
                    this.mUITextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBox";
                    this.mUITextBoxEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITextBoxEdit;
            }
        }
        
        public WpfEdit UITextBox_CopyEdit
        {
            get
            {
                if ((this.mUITextBox_CopyEdit == null))
                {
                    this.mUITextBox_CopyEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBox_CopyEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBox_Copy";
                    this.mUITextBox_CopyEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITextBox_CopyEdit;
            }
        }
        
        public WpfComboBox UIComboBoxComboBox
        {
            get
            {
                if ((this.mUIComboBoxComboBox == null))
                {
                    this.mUIComboBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIComboBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "comboBox";
                    this.mUIComboBoxComboBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIComboBoxComboBox;
            }
        }
        
        public WpfButton UICalculateButton
        {
            get
            {
                if ((this.mUICalculateButton == null))
                {
                    this.mUICalculateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICalculateButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "button";
                    this.mUICalculateButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUICalculateButton;
            }
        }
        
        public WpfEdit UITextBox_Copy1Edit
        {
            get
            {
                if ((this.mUITextBox_Copy1Edit == null))
                {
                    this.mUITextBox_Copy1Edit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITextBox_Copy1Edit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "textBox_Copy1";
                    this.mUITextBox_Copy1Edit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITextBox_Copy1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITextBoxEdit;
        
        private WpfEdit mUITextBox_CopyEdit;
        
        private WpfComboBox mUIComboBoxComboBox;
        
        private WpfButton mUICalculateButton;
        
        private WpfEdit mUITextBox_Copy1Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMainWindowWindow1 : WinWindow
    {
        
        public UIMainWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
}
